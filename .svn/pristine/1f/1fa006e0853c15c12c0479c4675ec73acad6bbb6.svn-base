/*!
 * Copyright(c) 2014 Jan Blaha (pofider)
 *
 * Configure ODataServer to run on mongodb
 */

var ObjectId = require('mongodb').ObjectID
var DataAccess = require('./DataAccess.js')
var hexTest = /^[0-9A-Fa-f]{24}$/

function _convertStringsToObjectIds (o) {
  for (var i in o) {
    if (i === '_id' && (typeof o[i] === 'string' || o[i] instanceof String) && hexTest.test(o[i])) {
      o[i] = new ObjectId(o[i])
    }

    if (o[i] !== null && typeof (o[i]) === 'object') {
      _convertStringsToObjectIds(o[i])
    }
  }
};

function update (getDB) {
  return function (collection, query, update, req, cb) {
    _convertStringsToObjectIds(query)

    if (update.$set) {
      delete update.$set._id
    }

    getDB(function (err, db) {
      if (err) {
        return cb(err)
      }

      db.collection(collection).updateOne(query, update, function (err, res) {
        if (err) {
          return cb(err)
        }

        if (res.matchedCount !== 1) {
          return cb(new Error('Update not successful'))
        }
        return cb(null, res.matchedCount)
      })
    })
  }
}

function remove (getDB) {
  return function (collection, query, req, cb) {
    _convertStringsToObjectIds(query)

    getDB(function (err, db) {
      if (err) {
        return cb(err)
      }

      db.collection(collection).remove(query, cb)
    })
  }
}

function insert (getDB) {
  return function (collection, doc, req, cb) {
    getDB(function (err, db) {
      if (err) {
        return cb(err)
      }

      db.collection(collection).insert(doc, function (err, res) {
        if (err) {
          return cb(err)
        }

        if (res.ops.length !== 1) {
          return cb(new Error('Mongo insert should return single document'))
        }

        cb(null, res.ops[0])
      })
    })
  }
}

function query (cfg, getDB) {
// 	console.log(getDB);
  return function (collection, query, req, cb) {
    _convertStringsToObjectIds(query)
    getDB(function (err, db) {
      if (err) {
        return cb(err)
      }
		if(query.$expand){
			obj = cfg.cfg.model.entityTypes[collection]
			fields = Object.keys(obj)
// 			console.log(fields)
			for(i=0;i<fields.length; i++){
				if(obj[fields[i]].key){
					var key = fields[i]
				}
			}
			console.log(query.$expand)
			// var key = Object.keys(query.$filter)[0]
			var pipeline = [{$match:query.$filter}]
// 			var pipeline = [{$lookup:{from:query.$expand[0], localField:key, foreignField:key, as:query.$expand[0]}},{$match:query.$filter}]

			for(var i=0; i<query.$expand.length; i++){
				pipeline.push({$lookup:{from:query.$expand[i], localField:key, foreignField:key, as:query.$expand[i]}});
			}

	 			console.log(pipeline)			
			var qr = db.collection(collection).aggregate(pipeline);
			if (query.$sort) {
      		  qr = qr.sort(query.$sort)
    		}
      		if (query.$skip) {
      		  qr = qr.skip(query.$skip)
      		}
			qr.toArray(function(err,res){
				if(res!=null){
					res.forEach(function(item){
						item.CardConfiguration = {results:item.CardConfiguration}
						item.ReportConfigSet = {results:item.ReportConfigSet}
						item.KPIConfigSet = {results:item.KPIConfigSet}
					})
					
					if(query.$top){
						res = res.splice(res.length-1,query.$top)
					}
					DataAccess.verifyReadAccess(req.cookies.session.userid, res, function(finalresult){
						cb(err,finalresult)
					})
					
				}
			})
		}	
		else{
			console.log(query.$filter)
     		var qr = db.collection(collection).find(query.$filter, { projection: query.$select || {} })	
      		if (query.$sort) {
      		  qr = qr.sort(query.$sort)
    		}
      		if (query.$skip) {
      		  qr = qr.skip(query.$skip)
      		}
     		if (query.$limit) {
     		   qr = qr.limit(query.$limit)
     		}

    		if (query.$count) {
    		    return qr.count(cb)
     		}

   		   if (!query.$inlinecount) {
			   
    		   qr.toArray(function(err, res){
				   DataAccess.verifyReadAccess(req.cookies.session.userid, res, function(finalresult){
						cb(err,finalresult)
					})
			   })
   		   }else{

			  qr.toArray(function (err, res) {
				if (err) {
					return cb(err)
				}

				 // db.collection(collection).find(query.$filter).count(function (err, c) {
					  // if (err) {
						// return cb(err)
					  // }
						// console.log("caught")
					  // cb(null, {
						  // count: c,
						  // value: res
					   // })
				  // })
				  DataAccess.verifyReadAccess(req.cookies.session.userid, res, function(result){
					cb(null, {
						  count: result.length,
						  value: result
					})
				  })
			})
		   }
      	}
    })
  }
}

module.exports = function (getDB) {
  return function (odataServer) {

    odataServer.update(update(getDB))
      .remove(remove(getDB))
      .query(query(odataServer, getDB))
      .insert(insert(getDB))
  }
}
