import pandas, json
import datetime
import pymongo
import io
import sys
import base64

def getColType(data, column):
	column_det = []
	for col in column:
		if isinstance(data[0][col], type(0.1)):
			column_det.append({'COLUMN_NAME':col, 'LABEL':col, 'DATATYPE':'float'})
		elif isinstance(data[0][col], type(1)):
			column_det.append({'COLUMN_NAME':col,'LABEL':col, 'DATATYPE':'Int'})
		elif isinstance(data[0][col], type(datetime.datetime.now())):
			column_det.append({'COLUMN_NAME':col, 'LABEL':col,'DATATYPE':'Date'})
		else:
			column_det.append({'COLUMN_NAME':col, 'LABEL':col,'DATATYPE':'String'})
	return column_det

def addData(collection, data):
	mongoClient = pymongo.MongoClient("mongodb://1.186.146.208:27017/")
	db = mongoClient["fileuploader"]
	col = db[collection]
	col.insert_many(data)
	
def updateMetadata(collection, column_det):
	mongoClient = pymongo.MongoClient("mongodb://1.186.146.208:27017/")
	db = mongoClient["fileuploader"]
	coll = db['CollectionDetails']
	measure = []
	dimension = []
	for col in column_det:
		if col['DATATYPE'] == "String":
			dimension.append(col['COLUMN_NAME'].upper())
		elif col['DATATYPE'] == "Int" or col['DATATYPE'] == "float":
			measure.append(col['COLUMN_NAME'].upper())
			
	data = {
		"TABLENAME":collection,
		"DIMENSIONS":dimension,
		"COLUMN_DET": column_det,
		"MEASURES":measure,
		"AGGREGATIONTYPE":"SUM"
	}
	coll.insert_one(data)
	return data

def emptyData(collection):
	mongoClient = pymongo.MongoClient("mongodb://1.186.146.208:27017/")
	db = mongoClient["fileuploader"]
	col = db[collection]
	col.delete_many({})
	col2 = db['CollectionDetails']
	col2.delete_one({"TABLENAME":collection})
	
def main():
	params = json.loads(sys.argv[1])
	encrypted = params['data']
	fileName = params['fileName']
	# agg = params['agg']
	decrypted=base64.b64decode(encrypted)
	toread = io.BytesIO()
	toread.write(decrypted)  # pass your `decrypted` string as the argument here
	toread.seek(0)
	excel_data_df = pandas.read_excel(toread)
	data = excel_data_df.to_dict(orient='record')
	column = excel_data_df.columns.ravel()
	column_det = getColType(data, column)
	emptyData(fileName)
	addData(fileName, data)
	updateMetadata(fileName, column_det)
	print(json.dumps(column_det))
if __name__ == '__main__':
    main()