var url	 = "mongodb://techvasppadmin:Init2020!@127.0.0.1:28017/";
const {ObjectId} = require('mongodb').ObjectId;
var database = "UserManagement_brevo"
var MongoClient=require('mongodb').MongoClient;

function verifyReadAccess(userid, result,  callback){
	MongoClient.connect(url,{ useUnifiedTopology: true },function(err,db)
	{
		if(err)
			callback(err)
		else
		{
			var dbo = db.db(database);
			dbo.collection("useraccesspagepermission").find({'userid':ObjectId(userid),"readid":"true"}).toArray(function(err, access){
				if(err)
					callback(err)
				else{
					
					if(access!=null){
						var finalResult = []
						for(var i=0; i<result.length; i++){
							if(result[i].CreatedBy && result[i].CreatedBy.toString() == userid.toString()){
								finalResult.push(result[i]);
							}
							else{
								for(var j=0; j<access.length; j++){
									if(access[j].pageid == result[i].Page_Id){
										finalResult.push(result[i]);
										break;
									}
								}
							}
						}
						callback(finalResult)
					}
				}
			})
		}	
	})
}

function verifyUpdateAccess(collection, userid, id, callback){
	MongoClient.connect(url,function(err,db)
	{
		if(err)
			callback(err)
		else
		{
			var dbo = db.db(database);
			dbo.collection("user").findOne({"_id":ObjectId(userid)}, function(err, user){
				if(err)
					callback(err)
				else{
					if(user !== null && user.typevalue == "Administrator")
						callback(true)
					else{
						var brevodb = db.db("BrevoV3")
						console.log(parseInt(id))
						var col = "OVPPageConfig"
						if(collection == "OVPPageConfig" || collection == "Scenarios")
							var query = {Page_Id:parseInt(id)}
						else if(collection == "ReportConfigSet")
							var query = {RepId:parseInt(id)} 
						else if(collection == "CardConfiguration")
							var query = {Configid:parseInt(id)} 
						else if(collection == "KPIConfigSet")
							var query = {KpiId:parseInt(id)} 
						else if(collection == "Variants"){
							var query = {VariantId:parseInt(id)}
							col = "Scenarios"
						}
						console.log(query)
						console.log(col)
						brevodb.collection(collection).findOne(query, function(err, res){
							if(err)
								callback(err)
							else{
								if(res != null){
									var pageid = res.Page_Id
									brevodb.collection(col).findOne({Page_Id:pageid}, function(err, res){
										if(err)
											callback(err)
										else{
											if(res != null){
												if(res.CreatedBy && res.CreatedBy.toString() == userid.toString())
													callback(true)
												else{
													dbo.collection("useraccesspagepermission").findOne({'userid':ObjectId(userid),"updateid":"true", 'pageid':parseInt(pageid)},function(err, access){
														if(err)
															callback(err)
														else{
															if(access == null)
																callback(false)
															else
																callback(true)
														}
													})
												}
											}
											else{
												callback(false)
											}
										}
									})
								}else{
									callback(false)
								}
							}
						})
						// }
						// brevodb.collection("OVPPageConfig").findOne({Page_Id:pageid}, function(err, res){
							// if(err)
								// callback(err)
							// else{
								// if(res.CreatedBy.toString() == userid.toString())
									// callback(true)
								// else{
									// dbo.collection("useraccesspagepermission").findOne({'userid':ObjectId(userid),"updateid":"true", 'pageid':int(pageid)},function(err, access){
										// if(err)
											 // callback(err)
										// else{
												// if(access == null)
													// callback(false)
												// else
													// callback(true)
											// }

									// })
								// }
							// }
						// })
					}
				}
			})
			
		}	
	})
}

function verifyDeleteAccess(userid, pageid, callback){
	MongoClient.connect(url,function(err,db)
	{
		if(err)
			callback(err)
		else
		{
			var dbo = db.db(database);
			dbo.collection("user").findOne({"_id":ObjectId(userid)}, function(err, user){
				if(err)
					callback(err)
				else{
					if(user !== null && user.typevalue == "Administrator")
						callback(true)
					else{
						var brevodb = db.db("BrevoV3")
						brevodb.collection("OVPPageConfig").findOne({Page_Id:pageid}, function(err, res){
							if(err)
								callback(err)
							else{
								
								if(res!=null && res.CreatedBy && res.CreatedBy.toString() == userid.toString())
									callback(true)
								else{
									dbo.collection("useraccesspagepermission").findOne({'userid':ObjectId(userid),"deleteid":"true", 'pageid':parseInt(pageid)},function(err, access){
										if(err)
											 callback(err)
										else{
												if(access == null)
													callback(false)
												else
													callback(true)
											}

									})
								}
							}
						})
					}
				}
			});
			
		}	
	})
}

function verifyCreateAccess(userid,collection, pageid, callback){

	MongoClient.connect(url,function(err,db)
	{
		if(err)
			callback(err)
		else
		{
			var brevodb = db.db("BrevoV3");
				console.log(collection)
				console.log(pageid)
			if(collection == "Variants")
				collection = "Scenarios";
			else
				collection = "OVPPageConfig"
			brevodb.collection(collection).findOne({Page_Id:pageid}, function(err, res){
				if(err)
					callback(err)
				else{
					
					if(res != null && res.CreatedBy && res.CreatedBy.toString() == userid.toString())
						callback(true)
					else{
						var dbo = db.db(database);
						dbo.collection("useraccesspagepermission").findOne({'userid':ObjectId(userid),"createid":"true", 'pageid':parseInt(pageid)},function(err, access){
							if(err)
								 callback(err)
							else{
									if(access == null)
										callback(false)
									else
										callback(true)
								}

						})
					}
				}
			})
		}	
	})
}

function verifyModelReadAccess(userid, model, callback){
	MongoClient.connect(url,function(err,db)
	{
		if(err)
			callback(err)
		else
		{
			var dbo = db.db(database);
			dbo.collection("useraccessmodulepermission").findOne({'userid':ObjectId(userid),"readid":"true", 'modelName':model},function(err, access){
				if(err)
					 callback(err)
				else{
						if(access == null)
							callback(false)
						else
							callback(true)
					}

			})
		}	
	})
}

function verifyModelUpdateAccess(userid, model, callback){
	MongoClient.connect(url,function(err,db)
	{
		if(err)
			callback(err)
		else
		{
			var dbo = db.db(database);
			dbo.collection("useraccessmodulepermission").findOne({'userid':ObjectId(userid),"updateid":"true", 'modelName':model},function(err, access){
				if(err)
					 callback(err)
				else{
						if(access == null)
							callback(false)
						else
							callback(true)
					}

			})
		}	
	})
}
function verifyModelDeleteAccess(userid, model, callback){
	MongoClient.connect(url,function(err,db)
	{
		if(err)
			callback(err)
		else
		{
			var dbo = db.db(database);
			dbo.collection("useraccessmodulepermission").findOne({'userid':ObjectId(userid),"deleteid":"true", 'modelName':model},function(err, access){
				if(err)
					 callback(err)
				else{
						if(access == null)
							callback(false)
						else
							callback(true)
					}

			})
		}	
	})
}
function verifyModelCreateAccess(userid, model, callback){
	MongoClient.connect(url,function(err,db)
	{
		if(err)
			callback(err)
		else
		{
			var dbo = db.db(database);
			dbo.collection("useraccessmodulepermission").findOne({'userid':ObjectId(userid),"createid":"true", 'modelName':model},function(err, access){
				if(err)
					 callback(err)
				else{
						if(access == null)
							callback(false)
						else
							callback(true)
					}

			})
		}	
	})
}

function verifyModelsReadAccess(userid, result,  callback){
	MongoClient.connect(url,function(err,db)
	{
		if(err)
			callback(err)
		else
		{
			var dbo = db.db(database);
			dbo.collection("useraccessmodulepermission").find({'userid':ObjectId(userid),"readid":"true"}).toArray(function(err, access){
				if(err)
					callback(err)
				else{
					if(access!=null){
						var finalResult = []
						for(var i=0; i<result.length; i++){
							for(var j=0; j<access.length; j++){
								console.log(result[i])
								if(access[j].pageid == result[i].Page_Id){
									finalResult.push(result[i]);
									break;
								}
							}
						}
						callback(finalResult)
					}
				}
			})
		}	
	})
}


module.exports = {
    verifyReadAccess,
    verifyUpdateAccess,
	verifyCreateAccess,
	verifyDeleteAccess,
	verifyModelReadAccess,
	verifyModelUpdateAccess,
	verifyModelDeleteAccess,
	verifyModelCreateAccess
}
